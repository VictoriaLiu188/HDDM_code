bootpearson[i] <- cor.test(vG,vH, method = "pearson")
bootspear[i] <- cor.test(vG,vH, method = "spearman")}
####
View(bootspear)
View(bootspear)
View(bootpearson)
View(bootpearson)
quantile(bootspear, c(.025, .975))
View(bootspear)
View(bootspear)
bootspear['value']
bootpearson['value']
bratspear <- cor.test(trees[, 'Girth'], trees[, 'Height'])/sd(bootspear)
View(respearson)
View(respearson)
tress$Girth
trees$Girth
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
resspear <- cor.test(trees$Girth, trees$Height)
cor.test(trees$Girth, trees$Height)
cor.test(trees$Girth, trees$Height, method = "spearman")
View(trees)
View(trees)
shuffle_group <- function(x) {
x$group <- sample(x$group)
x
}
nperm = 1000          ## number of permutations
delta <- numeric(nperm)  ## vector store mean differences
for (i in 1:nperm) {
dfperm <- shuffle_group(trees)   ## shuffle the "group" factor
shuff_girth <- dfperm$RT[dfperm$group == "old"]  ## extract RT
shuff_young <- dfperm$RT[dfperm$group == "young"] ## extract RT
delta[i] <- mean_diff(shuff_old, shuff_young)
}
dfperm <- shuffle_group(trees)
View(dfperm)
View(dfperm)
View(trees)
View(trees)
View(trees)
View(trees)
knitr::opts_chunk$set(echo = TRUE)
nperm = 1000          ## number of permutations
delta <- numeric(nperm)  ## vector store mean differences
for (i in 1:nperm) {
#dfperm <- shuffle_group(trees)   ## shuffle the "group" factor
shuff_girth <- sample(trees$Girth)  ## extract RT
shuff_height <- sample(trees$Height) ## extract RT
delta[i] <- cor.test(shuff_height, shuff_girth)
}
hist(delta)
class(delta)
View(delta)
View(delta)
knitr::opts_chunk$set(echo = TRUE)
nperm = 1000          ## number of permutations
nullcorr <- numeric(nperm)  ## vector store correlations
for (i in 1:nperm) {
shuff_girth <- sample(trees$Girth)
shuff_height <- sample(trees$Height)
nullres <- cor.test(shuff_height, shuff_girth)
nullcorr[i] <- nullres$estimate
}
hist(nullcorr)
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
length(nullcorr[nullcorr > real])
length(nullcorr[nullcorr > real])
nperm = 1000          ## number of permutations
nullcorr <- numeric(nperm)  ## vector store correlations
for (i in 1:nperm) {
shuff_girth <- sample(trees$Girth)
shuff_height <- sample(trees$Height)
nullres <- cor.test(shuff_height, shuff_girth)
nullcorr[i] <- nullres$estimate
}
hist(nullcorr)
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
length(nullcorr[nullcorr > real])
length(nullcorr[nullcorr > 1])
length(nullcorr[nullcorr > 0.4])
# rank/nperm
quasi<- numexc/nperm
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
numexc<- length(nullcorr[nullcorr > real])
# rank/nperm
quasi<- numexc/nperm
quantile(nullcorr, c(.025, .975))
real
knitr::opts_chunk$set(echo = TRUE)
data(trees)
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
respearson <- cor.test(trees$Girth, trees$Height, method = "pearson")
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor.test(vG,vH, method = "pearson")
c_s <- cor.test(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
####
quantile(bootspear, c(.025, .975))
quantile(bootpearson, c(.025, .975))
bratspear <- resspear$estimate/sd(bootspear)
pvalspear <- (1 - pnorm(bratspear)) * 2
bratpearson <- respearson$estimate/sd(bootpearson)
pvalpearson <- (1 - pnorm(bratpearson)) * 2
bratspear <- resspear$estimate/sd(bootspear)
pvalspear <- (1 - pnorm(bratspear)) * 2
bratpearson <- respearson$estimate/sd(bootpearson)
pvalpearson <- (1 - pnorm(bratpearson)) * 2
bratspear
bratpearson
nperm = 1000          ## number of permutations
nullcorr <- numeric(nperm)  ## vector store correlations
for (i in 1:nperm) {
shuff_girth <- sample(trees$Girth)
shuff_height <- sample(trees$Height)
nullres <- cor.test(shuff_height, shuff_girth)
nullcorr[i] <- nullres$estimate
}
hist(nullcorr)
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
numexc<- length(nullcorr[nullcorr > real])
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
numexc<- length(nullcorr[nullcorr > real])
numexc
# rank/nperm
quasi<- numexc/nperm
# rank/nperm
quasi<- numexc/nperm
quasi
data(trees)
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
respearson <- cor.test(trees$Girth, trees$Height, method = "pearson")
resspear
respearson
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor.test(vG,vH, method = "pearson")
c_s <- cor.test(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
####
bootspear
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor.test(vG,vH, method = "pearson")
c_s <- cor.test(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
####
# bootspear
bootpearson
knitr::opts_chunk$set(echo = TRUE)
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
cor(trees$Height, trees$Girth)
cor(trees$Height, trees$Girth, method = 'spearman')
View(resspear)
View(resspear)
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
data(trees)
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
respearson <- cor.test(trees$Girth, trees$Height, method = "pearson")
resspear
respearson
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
c_s <- cor(vG,vH, method = "spearman")
knitr::opts_chunk$set(echo = TRUE)
data(trees)
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
respearson <- cor.test(trees$Girth, trees$Height, method = "pearson")
resspear
respearson
data(trees)
resspear <- cor.test(trees$Girth, trees$Height, method = "spearman")
respearson <- cor.test(trees$Girth, trees$Height, method = "pearson")
resspear
respearson
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, 5, replace=TRUE)
vH <- sample(trees$Height, 5, replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate}
is.atomic(trees)
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate
}
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
# c_p <- cor(vG,vH, method = "pearson")
# c_s <- cor(vG,vH, method = "spearman")
# bootpearson[i] <- c_p$estimate
# bootspear[i] <- c_s$estimate
# }
####
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)}
# c_p <- cor(vG,vH, method = "pearson")
# c_s <- cor(vG,vH, method = "spearman")
# bootpearson[i] <- c_p$estimate
# bootspear[i] <- c_s$estimate
# }
####
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")}
# bootpearson[i] <- c_p$estimate
# bootspear[i] <- c_s$estimate
# }
####
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
# bootspear[i] <- c_s$estimate
}
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p
# bootspear[i] <- c_s$estimate
}
####
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p
bootspear[i] <- c_s
}
####
quantile(bootspear, c(.025, .975))
quantile(bootspear, c(.025, .975))
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor(vG,vH, method = "pearson")
c_s <- cor(vG,vH, method = "spearman")
bootpearson[i] <- c_p
bootspear[i] <- c_s
}
####
quantile(bootspear, c(.025, .975))
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees['Girth']), replace=TRUE)
vH <- sample(trees$Height, length(trees['Height']), replace=TRUE)
c_p <- cor.test(vG,vH, method = "pearson")
c_s <- cor.test(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate
}
bootpearson <- numeric(1000)
bootspear <- numeric(1000)
for (i in 1:1000) {
vG <- sample(trees$Girth, length(trees$Girth), replace=TRUE)
vH <- sample(trees$Height, length(trees$Height), replace=TRUE)
c_p <- cor.test(vG,vH, method = "pearson")
c_s <- cor.test(vG,vH, method = "spearman")
bootpearson[i] <- c_p$estimate
bootspear[i] <- c_s$estimate
}
####
quantile(bootspear, c(.025, .975))
quantile(bootpearson, c(.025, .975))
bratspear <- resspear$estimate/sd(bootspear)
pvalspear <- (1 - pnorm(bratspear)) * 2
bratpearson <- respearson$estimate/sd(bootpearson)
pvalpearson <- (1 - pnorm(bratpearson)) * 2
bratspear
bratpearson
nperm = 1000          ## number of permutations
nullcorr <- numeric(nperm)  ## vector store correlations
for (i in 1:nperm) {
shuff_girth <- sample(trees$Girth)
shuff_height <- sample(trees$Height)
nullres <- cor.test(shuff_height, shuff_girth)
nullcorr[i] <- nullres$estimate
}
hist(nullcorr)
sorted_nullcorr <- sort(nullcorr)
plot(sorted_nullcorr)
real <- respearson$estimate
numexc<- length(nullcorr[nullcorr > real])
numexc
# rank/nperm
quasi<- numexc/nperm
quasi
quantile(nullcorr, c(.025, .975))
x = list(666.5,962.6,734.2,844.4,544,964.1,690.7,508.1,641.6,590.9,676.9,587.6)
y = list(659.8,848.1,709.9,726.6,490.9,873.4,682.1,494.4,634.3,596.9,607.4,630)
t_res <- t.test(x, y, paired = TRUE, alternative = "two.sided")
View(x)
View(x)
View(y)
View(y)
View(x)
x = c(666.5,962.6,734.2,844.4,544,964.1,690.7,508.1,641.6,590.9,676.9,587.6)
y = c(659.8,848.1,709.9,726.6,490.9,873.4,682.1,494.4,634.3,596.9,607.4,630)
t_res <- t.test(x, y, paired = TRUE, alternative = "two.sided")
View(t_res)
x_2 = c(673.6,690.78, 725.2, 687.89, 532.3, 658.1, 577.1,500.5,547, 607.1,604.4,494.5)
y_2 = c(613.1,717.88,754, 769.8,461.6,658.22, 550.8,527.4,540.1,524.5,589.6,536.33)
t2_res <- t.test(x_2, y_2, paired = TRUE, alternative = "two.sided")
View(t2_res)
x = c(666.5,962.6,734.2,844.4,544,964.1,690.7,508.1,641.6,590.9,676.9,587.6)
y = c(659.8,848.1,709.9,726.6,490.9,873.4,682.1,494.4,634.3,596.9,607.4,630)
x_2 = c(673.6,690.78, 725.2, 687.89, 532.3, 658.1, 577.1,500.5,547, 607.1,604.4,494.5)
y_2 = c(613.1,717.88,754, 769.8,461.6,658.22, 550.8,527.4,540.1,524.5,589.6,536.33)
t_res <- t.test(x, y, paired = TRUE, alternative = "two.sided")
View(t_res)
View(t_res)
f_np = c(1367.91,
1098.48,
1153.44,
767.02,
1875.33,
1191.61,
1039.84,
1429.41,
1411.76,
1108.92,
1369.98,
919.92,)
f_np = c(1367.91,
1098.48,
1153.44,
767.02,
1875.33,
1191.61,
1039.84,
1429.41,
1411.76,
1108.92,
1369.98,
919.92,)
f_np = c(1367.91,
1098.48,
1153.44,
767.02,
1875.33,
1191.61,
1039.84,
1429.41,
1411.76,
1108.92,
1369.98,
919.92)
f_p = c(1627.64,
1189.11,
1205.85,
857.63,
1961.39,
1266.09,
1077.66,
1607.22,
1420.7,
1256.07,
1626.36,
979.8)
focal_res <- t.test(f_np, f_p, paired = TRUE, alternative = "two.sided")
nf_p = c(1702.63,
1424.93,
1480.79,
1046.52,
2273.78,
1634.6,
1224.54,
1895.73,
1746.82,
1754.76,
1639.6,
1096.63)
nf_np = c(1475.08,
1099.8,
1164.58,
872.54,
1906.34,
1444.81,
1125.26,
1611.64,
1186.64,
1294.83,
1556.53,
894.49)
nfocal_res<- t.test(nf_p, nf_np, paired = TRUE, alternative = "two.sided")
View(nfocal_res)
fp_nfp <- t.test(f_p, nf_p, paired = TRUE, alternative = "two.sided")
View(fp_nfp)
setwd('C:/Users/victo/Google Drive/HDDM/3_parameter_trace/t_trace/')
library(readr)
library(stats)
library(stringr)
library(tidyr)
library(ggplot2)
library(ggiraphExtra)
df <- read.csv('t_roi1_slopes.csv', header = FALSE)
df_stacked <- df %>%
pivot_longer(cols = c(proto_rf,rf_excep,proto_excep), names_to = "Group", values_to = "Value")
View(df)
df <- read.csv('t_roi1_slopes.csv', header = TRUE)
df_stacked <- df %>%
pivot_longer(cols = c(proto_rf,rf_excep,proto_excep), names_to = "Group", values_to = "Value")
print(df_stacked)
View(df_stacked)
model <- aov(value ~ Group, data = df_stacked)
model <- aov(Value ~ Group, data = df_stacked)
summary(model)
# Create a violin plot
ggplot(df_stacked, aes(x = Group, y = Value)) +
geom_violin() +
labs(title = "Violin Plot", x = "Group", y = "Value")
# Create a box plot
ggplot(df_stacked, aes(x = Group, y = Value)) +
geom_boxplot() +
labs(title = "Box Plot", x = "Group", y = "Value")
